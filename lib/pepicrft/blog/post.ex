defmodule Pepicrft.Blog.Post do
  @moduledoc """
  This module is a struct that represents a blog post.
  """
  @enforce_keys [:path, :slug, :old_slug, :title, :description, :date, :categories, :body, :og_image_path]
  defstruct [:path, :slug, :old_slug, :title, :description, :date, :categories, :body, :og_image_path]

  @doc """
  This method takes the absolute path to the file representing a blog post,
  the contents of the file, and the attributes that have been generated by
  the parser and returns an instance of the Pepicrft.Blog.Post struct.
  """
  @type attributes :: any
  @spec build(String.t(), attributes, String.t()) :: %Pepicrft.Blog.Post{}
  def build(path, %{"title" => title, "categories" => categories} = frontmatter, body) do
    filename_without_extension = path |> Path.rootname() |> Path.split() |> Enum.take(-1) |> hd
    [year, month, day] = filename_without_extension |> String.split("-") |> Enum.take(3)
    date = Date.from_iso8601!("#{year}-#{month}-#{day}")

    description =
      frontmatter["description"] || (String.slice(body, 0..200) <> "...") |> html_to_text

    filename_without_date_and_extension =
      filename_without_extension |> String.replace("#{year}-#{month}-#{day}-", "")

    slug =
      "/blog/" <> year <> "/" <> month <> "/" <> day <> "/" <> filename_without_date_and_extension
    og_image_path = Application.app_dir(:pepicrft, "priv/static/images#{slug}.jpg")
    struct!(
      __MODULE__,
      path: path,
      old_slug: "/blog/" <> filename_without_date_and_extension,
      slug: slug,
      title: title,
      date: date,
      body: body,
      categories: categories,
      description: description,
      og_image_path: og_image_path
    )
  end

  defp html_to_text(html) do
    {:safe, html} =
      html
      |> String.replace(~r/<li>/, "\\g{1}- ", global: true)
      |> String.replace(
        ~r/<\/?\s?br>|<\/\s?p>|<\/\s?li>|<\/\s?div>|<\/\s?h.>/,
        "\\g{1}\n\r",
        global: true
      )
      |> PhoenixHtmlSanitizer.Helpers.sanitize(:strip_tags)

    html
  end
end
